// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package statuspage

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/nycruz/pulumi-statuspage/sdk/go/statuspage"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := statuspage.NewComponent(ctx, "myComponent", &statuspage.ComponentArgs{
// 			PageId:      pulumi.String("my_page_id"),
// 			Description: pulumi.String("Status of my Website"),
// 			Status:      pulumi.String("operational"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
type Component struct {
	pulumi.CustomResourceState

	AutomationEmail pulumi.StringOutput `pulumi:"automationEmail"`
	// More detailed description for the component
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Display Name for the component
	Name               pulumi.StringOutput  `pulumi:"name"`
	OnlyShowIfDegraded pulumi.BoolPtrOutput `pulumi:"onlyShowIfDegraded"`
	// the ID of the page this component belongs to
	PageId pulumi.StringOutput `pulumi:"pageId"`
	// Should this component be shown component only if in degraded state
	Showcase pulumi.BoolPtrOutput `pulumi:"showcase"`
	// Should this component be showcased
	StartDate pulumi.StringPtrOutput `pulumi:"startDate"`
	Status    pulumi.StringPtrOutput `pulumi:"status"`
}

// NewComponent registers a new resource with the given unique name, arguments, and options.
func NewComponent(ctx *pulumi.Context,
	name string, args *ComponentArgs, opts ...pulumi.ResourceOption) (*Component, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.PageId == nil {
		return nil, errors.New("invalid value for required argument 'PageId'")
	}
	var resource Component
	err := ctx.RegisterResource("statuspage:index/component:Component", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetComponent gets an existing Component resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetComponent(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ComponentState, opts ...pulumi.ResourceOption) (*Component, error) {
	var resource Component
	err := ctx.ReadResource("statuspage:index/component:Component", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Component resources.
type componentState struct {
	AutomationEmail *string `pulumi:"automationEmail"`
	// More detailed description for the component
	Description *string `pulumi:"description"`
	// Display Name for the component
	Name               *string `pulumi:"name"`
	OnlyShowIfDegraded *bool   `pulumi:"onlyShowIfDegraded"`
	// the ID of the page this component belongs to
	PageId *string `pulumi:"pageId"`
	// Should this component be shown component only if in degraded state
	Showcase *bool `pulumi:"showcase"`
	// Should this component be showcased
	StartDate *string `pulumi:"startDate"`
	Status    *string `pulumi:"status"`
}

type ComponentState struct {
	AutomationEmail pulumi.StringPtrInput
	// More detailed description for the component
	Description pulumi.StringPtrInput
	// Display Name for the component
	Name               pulumi.StringPtrInput
	OnlyShowIfDegraded pulumi.BoolPtrInput
	// the ID of the page this component belongs to
	PageId pulumi.StringPtrInput
	// Should this component be shown component only if in degraded state
	Showcase pulumi.BoolPtrInput
	// Should this component be showcased
	StartDate pulumi.StringPtrInput
	Status    pulumi.StringPtrInput
}

func (ComponentState) ElementType() reflect.Type {
	return reflect.TypeOf((*componentState)(nil)).Elem()
}

type componentArgs struct {
	// More detailed description for the component
	Description *string `pulumi:"description"`
	// Display Name for the component
	Name               *string `pulumi:"name"`
	OnlyShowIfDegraded *bool   `pulumi:"onlyShowIfDegraded"`
	// the ID of the page this component belongs to
	PageId string `pulumi:"pageId"`
	// Should this component be shown component only if in degraded state
	Showcase *bool `pulumi:"showcase"`
	// Should this component be showcased
	StartDate *string `pulumi:"startDate"`
	Status    *string `pulumi:"status"`
}

// The set of arguments for constructing a Component resource.
type ComponentArgs struct {
	// More detailed description for the component
	Description pulumi.StringPtrInput
	// Display Name for the component
	Name               pulumi.StringPtrInput
	OnlyShowIfDegraded pulumi.BoolPtrInput
	// the ID of the page this component belongs to
	PageId pulumi.StringInput
	// Should this component be shown component only if in degraded state
	Showcase pulumi.BoolPtrInput
	// Should this component be showcased
	StartDate pulumi.StringPtrInput
	Status    pulumi.StringPtrInput
}

func (ComponentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*componentArgs)(nil)).Elem()
}

type ComponentInput interface {
	pulumi.Input

	ToComponentOutput() ComponentOutput
	ToComponentOutputWithContext(ctx context.Context) ComponentOutput
}

func (*Component) ElementType() reflect.Type {
	return reflect.TypeOf((**Component)(nil)).Elem()
}

func (i *Component) ToComponentOutput() ComponentOutput {
	return i.ToComponentOutputWithContext(context.Background())
}

func (i *Component) ToComponentOutputWithContext(ctx context.Context) ComponentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComponentOutput)
}

// ComponentArrayInput is an input type that accepts ComponentArray and ComponentArrayOutput values.
// You can construct a concrete instance of `ComponentArrayInput` via:
//
//          ComponentArray{ ComponentArgs{...} }
type ComponentArrayInput interface {
	pulumi.Input

	ToComponentArrayOutput() ComponentArrayOutput
	ToComponentArrayOutputWithContext(context.Context) ComponentArrayOutput
}

type ComponentArray []ComponentInput

func (ComponentArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Component)(nil)).Elem()
}

func (i ComponentArray) ToComponentArrayOutput() ComponentArrayOutput {
	return i.ToComponentArrayOutputWithContext(context.Background())
}

func (i ComponentArray) ToComponentArrayOutputWithContext(ctx context.Context) ComponentArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComponentArrayOutput)
}

// ComponentMapInput is an input type that accepts ComponentMap and ComponentMapOutput values.
// You can construct a concrete instance of `ComponentMapInput` via:
//
//          ComponentMap{ "key": ComponentArgs{...} }
type ComponentMapInput interface {
	pulumi.Input

	ToComponentMapOutput() ComponentMapOutput
	ToComponentMapOutputWithContext(context.Context) ComponentMapOutput
}

type ComponentMap map[string]ComponentInput

func (ComponentMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Component)(nil)).Elem()
}

func (i ComponentMap) ToComponentMapOutput() ComponentMapOutput {
	return i.ToComponentMapOutputWithContext(context.Background())
}

func (i ComponentMap) ToComponentMapOutputWithContext(ctx context.Context) ComponentMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComponentMapOutput)
}

type ComponentOutput struct{ *pulumi.OutputState }

func (ComponentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Component)(nil)).Elem()
}

func (o ComponentOutput) ToComponentOutput() ComponentOutput {
	return o
}

func (o ComponentOutput) ToComponentOutputWithContext(ctx context.Context) ComponentOutput {
	return o
}

type ComponentArrayOutput struct{ *pulumi.OutputState }

func (ComponentArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Component)(nil)).Elem()
}

func (o ComponentArrayOutput) ToComponentArrayOutput() ComponentArrayOutput {
	return o
}

func (o ComponentArrayOutput) ToComponentArrayOutputWithContext(ctx context.Context) ComponentArrayOutput {
	return o
}

func (o ComponentArrayOutput) Index(i pulumi.IntInput) ComponentOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Component {
		return vs[0].([]*Component)[vs[1].(int)]
	}).(ComponentOutput)
}

type ComponentMapOutput struct{ *pulumi.OutputState }

func (ComponentMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Component)(nil)).Elem()
}

func (o ComponentMapOutput) ToComponentMapOutput() ComponentMapOutput {
	return o
}

func (o ComponentMapOutput) ToComponentMapOutputWithContext(ctx context.Context) ComponentMapOutput {
	return o
}

func (o ComponentMapOutput) MapIndex(k pulumi.StringInput) ComponentOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Component {
		return vs[0].(map[string]*Component)[vs[1].(string)]
	}).(ComponentOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ComponentInput)(nil)).Elem(), &Component{})
	pulumi.RegisterInputType(reflect.TypeOf((*ComponentArrayInput)(nil)).Elem(), ComponentArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ComponentMapInput)(nil)).Elem(), ComponentMap{})
	pulumi.RegisterOutputType(ComponentOutput{})
	pulumi.RegisterOutputType(ComponentArrayOutput{})
	pulumi.RegisterOutputType(ComponentMapOutput{})
}
