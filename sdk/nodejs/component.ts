// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as statuspage from "@pulumi/statuspage";
 *
 * const myComponent = new statuspage.Component("myComponent", {
 *     pageId: "my_page_id",
 *     description: "Status of my Website",
 *     status: "operational",
 * });
 * ```
 */
export class Component extends pulumi.CustomResource {
    /**
     * Get an existing Component resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ComponentState, opts?: pulumi.CustomResourceOptions): Component {
        return new Component(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'statuspage:index/component:Component';

    /**
     * Returns true if the given object is an instance of Component.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Component {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Component.__pulumiType;
    }

    public /*out*/ readonly automationEmail!: pulumi.Output<string>;
    /**
     * More detailed description for the component
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * Display Name for the component
     */
    public readonly name!: pulumi.Output<string>;
    public readonly onlyShowIfDegraded!: pulumi.Output<boolean | undefined>;
    /**
     * the ID of the page this component belongs to
     */
    public readonly pageId!: pulumi.Output<string>;
    /**
     * Should this component be shown component only if in degraded state
     */
    public readonly showcase!: pulumi.Output<boolean | undefined>;
    /**
     * Should this component be showcased
     */
    public readonly startDate!: pulumi.Output<string | undefined>;
    public readonly status!: pulumi.Output<string | undefined>;

    /**
     * Create a Component resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ComponentArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ComponentArgs | ComponentState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ComponentState | undefined;
            resourceInputs["automationEmail"] = state ? state.automationEmail : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["onlyShowIfDegraded"] = state ? state.onlyShowIfDegraded : undefined;
            resourceInputs["pageId"] = state ? state.pageId : undefined;
            resourceInputs["showcase"] = state ? state.showcase : undefined;
            resourceInputs["startDate"] = state ? state.startDate : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
        } else {
            const args = argsOrState as ComponentArgs | undefined;
            if ((!args || args.pageId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'pageId'");
            }
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["onlyShowIfDegraded"] = args ? args.onlyShowIfDegraded : undefined;
            resourceInputs["pageId"] = args ? args.pageId : undefined;
            resourceInputs["showcase"] = args ? args.showcase : undefined;
            resourceInputs["startDate"] = args ? args.startDate : undefined;
            resourceInputs["status"] = args ? args.status : undefined;
            resourceInputs["automationEmail"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Component.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Component resources.
 */
export interface ComponentState {
    automationEmail?: pulumi.Input<string>;
    /**
     * More detailed description for the component
     */
    description?: pulumi.Input<string>;
    /**
     * Display Name for the component
     */
    name?: pulumi.Input<string>;
    onlyShowIfDegraded?: pulumi.Input<boolean>;
    /**
     * the ID of the page this component belongs to
     */
    pageId?: pulumi.Input<string>;
    /**
     * Should this component be shown component only if in degraded state
     */
    showcase?: pulumi.Input<boolean>;
    /**
     * Should this component be showcased
     */
    startDate?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Component resource.
 */
export interface ComponentArgs {
    /**
     * More detailed description for the component
     */
    description?: pulumi.Input<string>;
    /**
     * Display Name for the component
     */
    name?: pulumi.Input<string>;
    onlyShowIfDegraded?: pulumi.Input<boolean>;
    /**
     * the ID of the page this component belongs to
     */
    pageId: pulumi.Input<string>;
    /**
     * Should this component be shown component only if in degraded state
     */
    showcase?: pulumi.Input<boolean>;
    /**
     * Should this component be showcased
     */
    startDate?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
}
