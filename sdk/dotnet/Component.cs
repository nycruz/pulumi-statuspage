// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Statuspage
{
    /// <summary>
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using Pulumi;
    /// using Statuspage = Pulumi.Statuspage;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var myComponent = new Statuspage.Component("myComponent", new Statuspage.ComponentArgs
    ///         {
    ///             PageId = "my_page_id",
    ///             Description = "Status of my Website",
    ///             Status = "operational",
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// </summary>
    [StatuspageResourceType("statuspage:index/component:Component")]
    public partial class Component : Pulumi.CustomResource
    {
        [Output("automationEmail")]
        public Output<string> AutomationEmail { get; private set; } = null!;

        /// <summary>
        /// More detailed description for the component
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// Display Name for the component
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        [Output("onlyShowIfDegraded")]
        public Output<bool?> OnlyShowIfDegraded { get; private set; } = null!;

        /// <summary>
        /// the ID of the page this component belongs to
        /// </summary>
        [Output("pageId")]
        public Output<string> PageId { get; private set; } = null!;

        /// <summary>
        /// Should this component be shown component only if in degraded state
        /// </summary>
        [Output("showcase")]
        public Output<bool?> Showcase { get; private set; } = null!;

        /// <summary>
        /// Should this component be showcased
        /// </summary>
        [Output("startDate")]
        public Output<string?> StartDate { get; private set; } = null!;

        [Output("status")]
        public Output<string?> Status { get; private set; } = null!;


        /// <summary>
        /// Create a Component resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Component(string name, ComponentArgs args, CustomResourceOptions? options = null)
            : base("statuspage:index/component:Component", name, args ?? new ComponentArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Component(string name, Input<string> id, ComponentState? state = null, CustomResourceOptions? options = null)
            : base("statuspage:index/component:Component", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Component resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Component Get(string name, Input<string> id, ComponentState? state = null, CustomResourceOptions? options = null)
        {
            return new Component(name, id, state, options);
        }
    }

    public sealed class ComponentArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// More detailed description for the component
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Display Name for the component
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("onlyShowIfDegraded")]
        public Input<bool>? OnlyShowIfDegraded { get; set; }

        /// <summary>
        /// the ID of the page this component belongs to
        /// </summary>
        [Input("pageId", required: true)]
        public Input<string> PageId { get; set; } = null!;

        /// <summary>
        /// Should this component be shown component only if in degraded state
        /// </summary>
        [Input("showcase")]
        public Input<bool>? Showcase { get; set; }

        /// <summary>
        /// Should this component be showcased
        /// </summary>
        [Input("startDate")]
        public Input<string>? StartDate { get; set; }

        [Input("status")]
        public Input<string>? Status { get; set; }

        public ComponentArgs()
        {
        }
    }

    public sealed class ComponentState : Pulumi.ResourceArgs
    {
        [Input("automationEmail")]
        public Input<string>? AutomationEmail { get; set; }

        /// <summary>
        /// More detailed description for the component
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Display Name for the component
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("onlyShowIfDegraded")]
        public Input<bool>? OnlyShowIfDegraded { get; set; }

        /// <summary>
        /// the ID of the page this component belongs to
        /// </summary>
        [Input("pageId")]
        public Input<string>? PageId { get; set; }

        /// <summary>
        /// Should this component be shown component only if in degraded state
        /// </summary>
        [Input("showcase")]
        public Input<bool>? Showcase { get; set; }

        /// <summary>
        /// Should this component be showcased
        /// </summary>
        [Input("startDate")]
        public Input<string>? StartDate { get; set; }

        [Input("status")]
        public Input<string>? Status { get; set; }

        public ComponentState()
        {
        }
    }
}
