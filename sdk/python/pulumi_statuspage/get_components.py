# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = [
    'GetComponentsResult',
    'AwaitableGetComponentsResult',
    'get_components',
    'get_components_output',
]

@pulumi.output_type
class GetComponentsResult:
    """
    A collection of values returned by getComponents.
    """
    def __init__(__self__, components=None, filters=None, id=None, page_id=None):
        if components and not isinstance(components, list):
            raise TypeError("Expected argument 'components' to be a list")
        pulumi.set(__self__, "components", components)
        if filters and not isinstance(filters, list):
            raise TypeError("Expected argument 'filters' to be a list")
        pulumi.set(__self__, "filters", filters)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if page_id and not isinstance(page_id, str):
            raise TypeError("Expected argument 'page_id' to be a str")
        pulumi.set(__self__, "page_id", page_id)

    @property
    @pulumi.getter
    def components(self) -> Sequence['outputs.GetComponentsComponentResult']:
        return pulumi.get(self, "components")

    @property
    @pulumi.getter
    def filters(self) -> Optional[Sequence['outputs.GetComponentsFilterResult']]:
        return pulumi.get(self, "filters")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="pageId")
    def page_id(self) -> str:
        """
        the ID of the page this component belongs to
        """
        return pulumi.get(self, "page_id")


class AwaitableGetComponentsResult(GetComponentsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetComponentsResult(
            components=self.components,
            filters=self.filters,
            id=self.id,
            page_id=self.page_id)


def get_components(filters: Optional[Sequence[pulumi.InputType['GetComponentsFilterArgs']]] = None,
                   page_id: Optional[str] = None,
                   opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetComponentsResult:
    """
    ## Example Usage

    ```python
    import pulumi
    import pulumi_statuspage as statuspage

    default = statuspage.get_components(page_id=local["page_id"],
        filters=[statuspage.GetComponentsFilterArgs(
            name="name",
            values=[
                "value_1",
                "value_2",
            ],
        )])
    ```


    :param str page_id: the ID of the page this component belongs to
    """
    __args__ = dict()
    __args__['filters'] = filters
    __args__['pageId'] = page_id
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = _utilities.get_version()
    __ret__ = pulumi.runtime.invoke('statuspage:index/getComponents:getComponents', __args__, opts=opts, typ=GetComponentsResult).value

    return AwaitableGetComponentsResult(
        components=__ret__.components,
        filters=__ret__.filters,
        id=__ret__.id,
        page_id=__ret__.page_id)


@_utilities.lift_output_func(get_components)
def get_components_output(filters: Optional[pulumi.Input[Optional[Sequence[pulumi.InputType['GetComponentsFilterArgs']]]]] = None,
                          page_id: Optional[pulumi.Input[str]] = None,
                          opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetComponentsResult]:
    """
    ## Example Usage

    ```python
    import pulumi
    import pulumi_statuspage as statuspage

    default = statuspage.get_components(page_id=local["page_id"],
        filters=[statuspage.GetComponentsFilterArgs(
            name="name",
            values=[
                "value_1",
                "value_2",
            ],
        )])
    ```


    :param str page_id: the ID of the page this component belongs to
    """
    ...
