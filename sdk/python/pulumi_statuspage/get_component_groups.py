# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = [
    'GetComponentGroupsResult',
    'AwaitableGetComponentGroupsResult',
    'get_component_groups',
    'get_component_groups_output',
]

@pulumi.output_type
class GetComponentGroupsResult:
    """
    A collection of values returned by getComponentGroups.
    """
    def __init__(__self__, component_groups=None, filters=None, id=None, page_id=None):
        if component_groups and not isinstance(component_groups, list):
            raise TypeError("Expected argument 'component_groups' to be a list")
        pulumi.set(__self__, "component_groups", component_groups)
        if filters and not isinstance(filters, list):
            raise TypeError("Expected argument 'filters' to be a list")
        pulumi.set(__self__, "filters", filters)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if page_id and not isinstance(page_id, str):
            raise TypeError("Expected argument 'page_id' to be a str")
        pulumi.set(__self__, "page_id", page_id)

    @property
    @pulumi.getter(name="componentGroups")
    def component_groups(self) -> Sequence['outputs.GetComponentGroupsComponentGroupResult']:
        return pulumi.get(self, "component_groups")

    @property
    @pulumi.getter
    def filters(self) -> Optional[Sequence['outputs.GetComponentGroupsFilterResult']]:
        return pulumi.get(self, "filters")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="pageId")
    def page_id(self) -> str:
        """
        the ID of the page this component belongs to
        """
        return pulumi.get(self, "page_id")


class AwaitableGetComponentGroupsResult(GetComponentGroupsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetComponentGroupsResult(
            component_groups=self.component_groups,
            filters=self.filters,
            id=self.id,
            page_id=self.page_id)


def get_component_groups(filters: Optional[Sequence[pulumi.InputType['GetComponentGroupsFilterArgs']]] = None,
                         page_id: Optional[str] = None,
                         opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetComponentGroupsResult:
    """
    ## Example Usage

    ```python
    import pulumi
    import pulumi_statuspage as statuspage

    default = statuspage.get_component_groups(page_id=local["page_id"],
        filters=[statuspage.GetComponentGroupsFilterArgs(
            name="name",
            values=[
                "value_1",
                "value_2",
            ],
        )])
    ```


    :param str page_id: the ID of the page this component belongs to
    """
    __args__ = dict()
    __args__['filters'] = filters
    __args__['pageId'] = page_id
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = _utilities.get_version()
    __ret__ = pulumi.runtime.invoke('statuspage:index/getComponentGroups:getComponentGroups', __args__, opts=opts, typ=GetComponentGroupsResult).value

    return AwaitableGetComponentGroupsResult(
        component_groups=__ret__.component_groups,
        filters=__ret__.filters,
        id=__ret__.id,
        page_id=__ret__.page_id)


@_utilities.lift_output_func(get_component_groups)
def get_component_groups_output(filters: Optional[pulumi.Input[Optional[Sequence[pulumi.InputType['GetComponentGroupsFilterArgs']]]]] = None,
                                page_id: Optional[pulumi.Input[str]] = None,
                                opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetComponentGroupsResult]:
    """
    ## Example Usage

    ```python
    import pulumi
    import pulumi_statuspage as statuspage

    default = statuspage.get_component_groups(page_id=local["page_id"],
        filters=[statuspage.GetComponentGroupsFilterArgs(
            name="name",
            values=[
                "value_1",
                "value_2",
            ],
        )])
    ```


    :param str page_id: the ID of the page this component belongs to
    """
    ...
